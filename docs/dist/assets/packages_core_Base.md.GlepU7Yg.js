import{_ as e,o as a,c as i,R as s}from"./chunks/framework.os06lqCT.js";const k=JSON.parse('{"title":"Base.js","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"packages/core/Base.md","filePath":"packages/core/Base.md","lastUpdated":1702935967000}'),t={name:"packages/core/Base.md"},o=s('<h1 id="base-js" tabindex="-1">Base.js <a class="header-anchor" href="#base-js" aria-label="Permalink to &quot;Base.js&quot;">​</a></h1><p>The <code>Base</code> class serves as a fundamental building block within the ToolX library. It provides basic functionalities and utilities common to various components of the library. Below is a comprehensive overview of the <code>Base</code> class.</p><h2 id="class-overview" tabindex="-1">Class Overview <a class="header-anchor" href="#class-overview" aria-label="Permalink to &quot;Class Overview&quot;">​</a></h2><p><code>Base</code> is a foundational class designed to be extended by other classes in the ToolX library. It encapsulates common properties and methods that are useful across different tools and components.</p><h3 id="properties" tabindex="-1">Properties <a class="header-anchor" href="#properties" aria-label="Permalink to &quot;Properties&quot;">​</a></h3><ul><li><code>debug</code>: A boolean property indicating whether debug mode is active. When set to <code>true</code>, additional log information may be output to the console.</li></ul><h3 id="methods" tabindex="-1">Methods <a class="header-anchor" href="#methods" aria-label="Permalink to &quot;Methods&quot;">​</a></h3><h4 id="constructor-options-pathin-pathout" tabindex="-1"><code>constructor(options, pathIn, pathOut)</code> <a class="header-anchor" href="#constructor-options-pathin-pathout" aria-label="Permalink to &quot;`constructor(options, pathIn, pathOut)`&quot;">​</a></h4><p>The constructor initializes a new instance of the <code>Base</code> class.</p><ul><li><code>options</code>: An optional parameter for configuration options.</li><li><code>pathIn</code>: An optional string or array of strings indicating the input path(s).</li><li><code>pathOut</code>: An optional string indicating the output path.</li></ul><h4 id="getid" tabindex="-1"><code>getID()</code> <a class="header-anchor" href="#getid" aria-label="Permalink to &quot;`getID()`&quot;">​</a></h4><p>Returns the current ID as a number. This ID is used internally for tracking instances.</p><h4 id="getuid" tabindex="-1"><code>getUID()</code> <a class="header-anchor" href="#getuid" aria-label="Permalink to &quot;`getUID()`&quot;">​</a></h4><p>Generates and returns a unique ID for the instance. This is useful for creating unique identifiers for instances of derived classes.</p><h4 id="static-getext-file" tabindex="-1"><code>static getExt(file)</code> <a class="header-anchor" href="#static-getext-file" aria-label="Permalink to &quot;`static getExt(file)`&quot;">​</a></h4><p>A static method that returns the file extension of a given file.</p><ul><li><code>file</code>: A string representing the filename.</li></ul><h4 id="static-checkfileext-file-exts" tabindex="-1"><code>static checkFileExt(file, exts)</code> <a class="header-anchor" href="#static-checkfileext-file-exts" aria-label="Permalink to &quot;`static checkFileExt(file, exts)`&quot;">​</a></h4><p>Checks if a given file has one of the specified extensions.</p><ul><li><code>file</code>: The file name as a string.</li><li><code>exts</code>: An array of string extensions to check against.</li></ul><h4 id="includes-arr-value" tabindex="-1"><code>includes(arr, value)</code> <a class="header-anchor" href="#includes-arr-value" aria-label="Permalink to &quot;`includes(arr, value)`&quot;">​</a></h4><p>Determines if a given value is included in an array.</p><ul><li><code>arr</code>: An array of strings.</li><li><code>value</code>: A string value to check for inclusion in the array.</li></ul><h4 id="excludes-arr-value" tabindex="-1"><code>excludes(arr, value)</code> <a class="header-anchor" href="#excludes-arr-value" aria-label="Permalink to &quot;`excludes(arr, value)`&quot;">​</a></h4><p>Determines if a given value is excluded from an array.</p><ul><li><code>arr</code>: An array of strings.</li><li><code>value</code>: A string value to check for exclusion from the array.</li></ul><h4 id="exact-inputvalue-filevalue" tabindex="-1"><code>exact(inputValue, fileValue)</code> <a class="header-anchor" href="#exact-inputvalue-filevalue" aria-label="Permalink to &quot;`exact(inputValue, fileValue)`&quot;">​</a></h4><p>Checks if two values are exactly the same.</p><ul><li><code>inputValue</code>: A string value to compare.</li><li><code>fileValue</code>: Another string value to compare against the first.</li></ul><h4 id="set-options-pathin-pathout" tabindex="-1"><code>set(options, pathIn, pathOut)</code> <a class="header-anchor" href="#set-options-pathin-pathout" aria-label="Permalink to &quot;`set(options, pathIn, pathOut)`&quot;">​</a></h4><p>Configures the instance with specified options and paths.</p><ul><li><code>options</code>: Configuration options.</li><li><code>pathIn</code>: Input path(s) as a string or an array of strings.</li><li><code>pathOut</code>: Output path as a string.</li></ul><h4 id="log-args" tabindex="-1"><code>log(args)</code> <a class="header-anchor" href="#log-args" aria-label="Permalink to &quot;`log(args)`&quot;">​</a></h4><p>Outputs log information to the console if debug mode is active.</p><ul><li><code>args</code>: Variable number of arguments to log.</li></ul><h2 id="usage-example" tabindex="-1">Usage Example <a class="header-anchor" href="#usage-example" aria-label="Permalink to &quot;Usage Example&quot;">​</a></h2><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Base </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;path-to-Base.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Creating an instance of the Base class</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> baseInstance</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Base</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ debug: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;input/path&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;output/path&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Working with the instance</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(baseInstance.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getID</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span></code></pre></div><p>In this example, an instance of the <code>Base</code> class is created with debug mode enabled, input and output paths specified. The <code>getID</code> method is then called to demonstrate its usage.</p><hr><p>This documentation provides an essential guide to the <code>Base</code> class, a core component of the ToolX library.</p>',40),n=[o];function l(r,h,c,d,p,u){return a(),i("div",null,n)}const f=e(t,[["render",l]]);export{k as __pageData,f as default};
