import{_ as n,o as s,c as a,R as p}from"./chunks/framework.tzssv0c6.js";const m=JSON.parse('{"title":"Guide to Using ChatGPT for Efficient and Standardized Documentation Writing","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"docs/DocumentationByAI.md","filePath":"docs/DocumentationByAI.md","lastUpdated":1703236956000}'),e={name:"docs/DocumentationByAI.md"},i=p(`<h1 id="guide-to-using-chatgpt-for-efficient-and-standardized-documentation-writing" tabindex="-1">Guide to Using ChatGPT for Efficient and Standardized Documentation Writing <a class="header-anchor" href="#guide-to-using-chatgpt-for-efficient-and-standardized-documentation-writing" aria-label="Permalink to &quot;Guide to Using ChatGPT for Efficient and Standardized Documentation Writing&quot;">​</a></h1><p>Writing documentation can often be a time-consuming task, especially when aiming for consistency and clarity. ChatGPT, with its advanced language capabilities, can significantly streamline this process. This guide provides advice on how to use ChatGPT to create better, faster, and uniformly standardized documentation.</p><h2 id="using-custom-gpts-for-tool-specific-documentation" tabindex="-1">Using Custom GPTs for Tool-Specific Documentation <a class="header-anchor" href="#using-custom-gpts-for-tool-specific-documentation" aria-label="Permalink to &quot;Using Custom GPTs for Tool-Specific Documentation&quot;">​</a></h2><h3 id="accessing-custom-gpts" tabindex="-1">Accessing Custom GPTs <a class="header-anchor" href="#accessing-custom-gpts" aria-label="Permalink to &quot;Accessing Custom GPTs&quot;">​</a></h3><p>You can utilize custom GPTs tailored for that purpose. An example of such a custom GPT can be found here: <a href="https://chat.openai.com/g/g-RkCQUt0PH-toolx-documentation" target="_blank" rel="noreferrer">ToolX Documentation GPT</a>. This specialized GPT is designed to understand the context and nuances of ToolX, making it an efficient choice for creating its documentation.</p><h3 id="creating-a-new-custom-gpt" tabindex="-1">Creating a New Custom GPT <a class="header-anchor" href="#creating-a-new-custom-gpt" aria-label="Permalink to &quot;Creating a New Custom GPT&quot;">​</a></h3><p>Or you can create one. Start by instructing the AI with relevant information about your tool. Use the following instruction:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>ToolX is a powerful library adept in file processing, insightful data extraction, and new file generation through a fluid pipeline of tools. </span></span>
<span class="line"><span>When documentation is requested, you should provide an MD file that is downloadable. This documentation must include examples for every static method of the tool being documented.</span></span>
<span class="line"><span>The documentation should begin with a concise, simplified description of the tool&#39;s purpose and functionality. This description must be processed to ensure clarity and simplicity.</span></span>
<span class="line"><span>The options should be taken from the .d.ts code provided.</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Use this rules for highlight:</span></span>
<span class="line"><span>\`\`\`</span></span>
<span class="line"><span>::: info</span></span>
<span class="line"><span>This is an info box.</span></span>
<span class="line"><span>:::</span></span>
<span class="line"><span></span></span>
<span class="line"><span>::: tip</span></span>
<span class="line"><span>This is a tip.</span></span>
<span class="line"><span>:::</span></span>
<span class="line"><span></span></span>
<span class="line"><span>::: warning</span></span>
<span class="line"><span>This is a warning.</span></span>
<span class="line"><span>:::</span></span>
<span class="line"><span></span></span>
<span class="line"><span>::: danger</span></span>
<span class="line"><span>This is a dangerous warning.</span></span>
<span class="line"><span>:::</span></span>
<span class="line"><span></span></span>
<span class="line"><span>::: details</span></span>
<span class="line"><span>This is a details block.</span></span>
<span class="line"><span>:::</span></span>
<span class="line"><span>\`\`\`</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Prompt can be like this:</span></span>
<span class="line"><span>\`\`\`</span></span>
<span class="line"><span>write downloadable documentation in md format of this tool ToolDemo.js</span></span>
<span class="line"><span>[description] is a specialized component of the ToolX library, focused on SVG file manipulation and optimization, use svgo external library https://github.com/svg/svgo.</span></span>
<span class="line"><span></span></span>
<span class="line"><span>[tip] this class integrates the SVGO library, to reduce the size of SVG files and other improvements </span></span>
<span class="line"><span></span></span>
<span class="line"><span>[options] export type ToolOptions = {</span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * - Options to set the multipass property [default = true].</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    multipass?: boolean;</span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * - Options to configure extensions.</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    exts?: [&#39;svg&#39;];</span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * - Options to configure sharp library features.</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    settings?: ToolSettings;</span></span>
<span class="line"><span>};</span></span>
<span class="line"><span>export type ToolSettings = {</span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * - Control the precision of floating point numbers.</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    floatPrecision?: number;</span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * - Control the precision of transformation expressions.</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    transformPrecision?: number;</span></span>
<span class="line"><span>};</span></span>
<span class="line"><span>\`\`\`</span></span>
<span class="line"><span></span></span>
<span class="line"><span>an you need to translate it like the text below:</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span># ToolSvg</span></span>
<span class="line"><span></span></span>
<span class="line"><span>\`ToolSvg.js\` is a specialized component of the ToolX library, focused on SVG file manipulation and optimization. Leveraging the capabilities of the SVGO (SVG Optimizer) library, \`ToolSvg.js\` offers efficient and powerful means to process and optimize SVG files. This document details its functionalities, including how SVGO is utilized for SVG optimization, and provides usage examples both as a standalone tool and within a pipeline.</span></span>
<span class="line"><span></span></span>
<span class="line"><span>::: tip</span></span>
<span class="line"><span>The \`ToolSvg\` class integrates the SVGO library, a renowned tool for SVG optimization. SVGO employs a variety of optimization techniques to reduce the size of SVG files and improve their performance. The integration with SVGO in \`ToolSvg\` allows users to take advantage of these optimizations within the ToolX environment, enhancing the efficiency and effectiveness of SVG processing.</span></span>
<span class="line"><span>:::</span></span>
<span class="line"><span></span></span>
<span class="line"><span>## Props</span></span>
<span class="line"><span></span></span>
<span class="line"><span>The \`ToolSvg\` class accepts options to configure its behavior and the SVG optimization process. These options are passed to the \`svgo\` library.</span></span>
<span class="line"><span></span></span>
<span class="line"><span>### \`settings\` {#settings}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>The \`settings\` option allows customization of various SVG optimization parameters. These are directly passed to the \`svgo\` library. Some of the settings include:</span></span>
<span class="line"><span></span></span>
<span class="line"><span>- \`floatPrecision\`: Control the precision of floating point numbers.</span></span>
<span class="line"><span>- \`transformPrecision\`: Control the precision of transformation expressions.</span></span>
<span class="line"><span></span></span>
<span class="line"><span>### \`options\` {#options}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>- \`multipass\`: Enable or disable multiple optimization passes.</span></span>
<span class="line"><span></span></span>
<span class="line"><span>## Usage</span></span>
<span class="line"><span></span></span>
<span class="line"><span>### Direct Usage</span></span>
<span class="line"><span></span></span>
<span class="line"><span>\`\`\`js</span></span>
<span class="line"><span>import ToolSvg from &#39;@toolx/svg&#39;;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// Example usage</span></span>
<span class="line"><span>const toolSvg = new ToolSvg({</span></span>
<span class="line"><span>    multipass: true,</span></span>
<span class="line"><span>    settings: {</span></span>
<span class="line"><span>        floatPrecision: 5,</span></span>
<span class="line"><span>        transformPrecision: 5,</span></span>
<span class="line"><span>        // Other svgo settings</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>});</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// Running the tool</span></span>
<span class="line"><span>toolSvg.run(options, inputFile, outputFile).then(() =&gt; {</span></span>
<span class="line"><span>    console.log(&#39;SVG optimization complete&#39;);</span></span>
<span class="line"><span>});</span></span>
<span class="line"><span>\`\`\`</span></span>
<span class="line"><span></span></span>
<span class="line"><span>### Usage in Pipeline</span></span>
<span class="line"><span></span></span>
<span class="line"><span>\`\`\`js</span></span>
<span class="line"><span>import { Pipeline } from &#39;@toolx/core&#39;;</span></span>
<span class="line"><span>import ToolSvg from &#39;@toolx/svg&#39;;</span></span>
<span class="line"><span>import ToolOther from &#39;@toolx/other&#39;; // Example of another tool</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// Setting up the pipeline</span></span>
<span class="line"><span>const pipeline = new Pipeline();</span></span>
<span class="line"><span>pipeline.compose(</span></span>
<span class="line"><span>    new ToolOther(/* ToolOther options */),</span></span>
<span class="line"><span>    new ToolSvg({</span></span>
<span class="line"><span>        multipass: true,</span></span>
<span class="line"><span>        settings: {</span></span>
<span class="line"><span>            floatPrecision: 3,</span></span>
<span class="line"><span>            transformPrecision: 3,</span></span>
<span class="line"><span>            // Other svgo settings</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>    })</span></span>
<span class="line"><span>);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// Running the pipeline</span></span>
<span class="line"><span>pipeline.run(options, inputPath, outputPath).then(() =&gt; {</span></span>
<span class="line"><span>    console.log(&#39;SVG processing complete&#39;);</span></span>
<span class="line"><span>});</span></span>
<span class="line"><span>\`\`\`</span></span>
<span class="line"><span></span></span>
<span class="line"><span>### External Library: \`svgo\`</span></span>
<span class="line"><span></span></span>
<span class="line"><span>\`ToolSvg\` utilizes the \`svgo\` library for SVG optimization. The settings provided in the \`settings\` option are used to configure \`svgo\`. For more information on \`svgo\` settings, refer to the [svgo documentation](https://github.com/svg/svgo).</span></span></code></pre></div><h3 id="generating-documentation-with-custom-gpt" tabindex="-1">Generating Documentation with Custom GPT <a class="header-anchor" href="#generating-documentation-with-custom-gpt" aria-label="Permalink to &quot;Generating Documentation with Custom GPT&quot;">​</a></h3><p>To generate documentation for a specific tool (e.g., <code>ToolDemo.js</code>), use the following prompt format:</p><div class="language-markdown vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">markdown</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">write a downloadable documentation in md format of this tool ToolDemo.js</span></span></code></pre></div><p>Include a description of the tool and its options, preferably by providing a <code>.d.ts</code> file for detailed type definitions.</p><h4 id="adding-highlights" tabindex="-1">Adding Highlights <a class="header-anchor" href="#adding-highlights" aria-label="Permalink to &quot;Adding Highlights&quot;">​</a></h4><p>For added clarity, you can include highlights such as <code>[caution]</code>, <code>[tips]</code>, or <code>[info]</code> to emphasize important parts of the documentation.</p><h2 id="using-classic-chatgpt-for-documentation" tabindex="-1">Using Classic ChatGPT for Documentation <a class="header-anchor" href="#using-classic-chatgpt-for-documentation" aria-label="Permalink to &quot;Using Classic ChatGPT for Documentation&quot;">​</a></h2><p>Classic ChatGPT can be used for a wide range of documentation tasks. Here’s how you can leverage it:</p><p><strong>Custom Instructions</strong>: Copy the instructions above in ChatGPT custom instructions section.</p><h1 id="create-a-prompt" tabindex="-1">Create a prompt <a class="header-anchor" href="#create-a-prompt" aria-label="Permalink to &quot;Create a prompt&quot;">​</a></h1><ol><li><p><strong>Start a New Chat</strong>: Open a new chat session in ChatGPT.</p></li><li><p><strong>Write the Prompt</strong>: Clearly articulate your documentation needs. For example, if you’re documenting a Tool, your prompt might look like this:</p></li></ol><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>write downloadable documentation in md format of this tool ToolDemo.js</span></span>
<span class="line"><span>[description] is a specialized component of the ToolX library, focused on SVG file manipulation and optimization, use svgo external library https://github.com/svg/svgo.</span></span>
<span class="line"><span></span></span>
<span class="line"><span>[options] export type ToolOptions = {</span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * - Options to set the multipass property [default = true].</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    multipass?: boolean;</span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * - Options to configure extensions.</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    exts?: [&#39;svg&#39;];</span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * - Options to configure sharp library features.</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    settings?: ToolSettings;</span></span>
<span class="line"><span>};</span></span>
<span class="line"><span>export type ToolSettings = {</span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * - Control the precision of floating point numbers.</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    floatPrecision?: number;</span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * - Control the precision of transformation expressions.</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    transformPrecision?: number;</span></span>
<span class="line"><span>};</span></span></code></pre></div><ol start="3"><li><p><strong>Refine and Expand</strong>: Based on the initial output, you can ask ChatGPT to refine specific sections or add additional details.</p></li><li><p><strong>Incorporate Highlights</strong>: You can use <code>[warning]</code>, <code>[tip]</code>, <code>[info]</code>,<code>[danger]</code>, <code>[details]</code> to make the documentation more user-friendly.</p></li><li><p><strong>Review and Edit</strong>: Always review the generated documentation for accuracy and completeness. Make necessary edits to ensure it meets your standards.</p></li></ol><p>By following these steps, you can effectively use ChatGPT to create comprehensive and standardized documentation, saving time and ensuring consistency across your documentation suite.</p>`,22),t=[i];function o(l,c,r,d,u,h){return s(),a("div",null,t)}const f=n(e,[["render",o]]);export{m as __pageData,f as default};
