import{_ as s,o as i,c as a,R as e}from"./chunks/framework.os06lqCT.js";const u=JSON.parse('{"title":"Tool.server.js","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"packages/core/Tool.server.md","filePath":"packages/core/Tool.server.md","lastUpdated":1702935967000}'),t={name:"packages/core/Tool.server.md"},n=e('<h1 id="tool-server-js" tabindex="-1">Tool.server.js <a class="header-anchor" href="#tool-server-js" aria-label="Permalink to &quot;Tool.server.js&quot;">​</a></h1><p><code>Tool.server.js</code> is a key component of the ToolX library, specialized in directory operations and file manipulation. This document offers a detailed guide to its capabilities and usage examples for each static method.</p><h2 id="class-overview" tabindex="-1">Class Overview <a class="header-anchor" href="#class-overview" aria-label="Permalink to &quot;Class Overview&quot;">​</a></h2><p>The <code>Tool</code> class, inheriting from the <code>Base</code> class, provides methods for directory and file management.</p><h3 id="methods" tabindex="-1">Methods <a class="header-anchor" href="#methods" aria-label="Permalink to &quot;Methods&quot;">​</a></h3><h4 id="static-async-createdir-dirpath" tabindex="-1"><code>static async createDir(dirPath)</code> <a class="header-anchor" href="#static-async-createdir-dirpath" aria-label="Permalink to &quot;`static async createDir(dirPath)`&quot;">​</a></h4><p>Creates a directory if it doesn&#39;t exist.</p><ul><li><code>dirPath</code>: The path of the directory to create.</li></ul><h5 id="example" tabindex="-1">Example <a class="header-anchor" href="#example" aria-label="Permalink to &quot;Example&quot;">​</a></h5><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Tool.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createDir</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/path/to/new/dir&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><h4 id="static-async-exist-path" tabindex="-1"><code>static async exist(path)</code> <a class="header-anchor" href="#static-async-exist-path" aria-label="Permalink to &quot;`static async exist(path)`&quot;">​</a></h4><p>Checks if a path exists.</p><ul><li><code>path</code>: The path to check.</li></ul><h5 id="example-1" tabindex="-1">Example <a class="header-anchor" href="#example-1" aria-label="Permalink to &quot;Example&quot;">​</a></h5><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> exists</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Tool.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">exist</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/path/to/check&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><h4 id="static-changeext-file-ext" tabindex="-1"><code>static changeExt(file, ext)</code> <a class="header-anchor" href="#static-changeext-file-ext" aria-label="Permalink to &quot;`static changeExt(file, ext)`&quot;">​</a></h4><p>Changes the extension of a file.</p><ul><li><code>file</code>: The file whose extension is to change.</li><li><code>ext</code>: The new extension.</li></ul><h5 id="example-2" tabindex="-1">Example <a class="header-anchor" href="#example-2" aria-label="Permalink to &quot;Example&quot;">​</a></h5><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> newFilePath</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Tool.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">changeExt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;example.txt&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;.md&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><h4 id="static-removefiles-files" tabindex="-1"><code>static removeFiles(files)</code> <a class="header-anchor" href="#static-removefiles-files" aria-label="Permalink to &quot;`static removeFiles(files)`&quot;">​</a></h4><p>Removes multiple files.</p><ul><li><code>files</code>: An array of file paths to remove.</li></ul><h5 id="example-3" tabindex="-1">Example <a class="header-anchor" href="#example-3" aria-label="Permalink to &quot;Example&quot;">​</a></h5><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Tool.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">removeFiles</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/path/to/file1.txt&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/path/to/file2.txt&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]);</span></span></code></pre></div><h4 id="static-removedir-dirpath" tabindex="-1"><code>static removeDir(dirPath)</code> <a class="header-anchor" href="#static-removedir-dirpath" aria-label="Permalink to &quot;`static removeDir(dirPath)`&quot;">​</a></h4><p>Removes a directory and its contents.</p><ul><li><code>dirPath</code>: The path of the directory to remove.</li></ul><h5 id="example-4" tabindex="-1">Example <a class="header-anchor" href="#example-4" aria-label="Permalink to &quot;Example&quot;">​</a></h5><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Tool.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">removeDir</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/path/to/dir&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><h4 id="async-run-options-pathin-pathout" tabindex="-1"><code>async run(options, pathIn, pathOut)</code> <a class="header-anchor" href="#async-run-options-pathin-pathout" aria-label="Permalink to &quot;`async run(options, pathIn, pathOut)`&quot;">​</a></h4><p>The <code>run</code> method is the core function of the <code>Tool</code> class. It orchestrates the tool&#39;s main operations, managing the processing of files and directories based on the provided options and paths.</p><ul><li><code>options</code>: An object containing configuration options for the tool. These options can vary based on the specific requirements of the task and can include settings related to file handling, processing criteria, and output formatting.</li><li><code>pathIn</code>: This parameter can be either a string or an array of strings, representing the input path(s) for the files to be processed. The method handles these paths to read, manipulate, or copy files as needed.</li><li><code>pathOut</code>: A string indicating the output path where the processed files will be saved or stored. This path is used to direct the output of the tool&#39;s operations, ensuring that the results are correctly placed in the desired location.</li></ul><h4 id="process-flow" tabindex="-1">Process Flow <a class="header-anchor" href="#process-flow" aria-label="Permalink to &quot;Process Flow&quot;">​</a></h4><ol><li><strong>Initialization</strong>: The method begins by setting up event handlers and merging various option objects to form a complete configuration for the tool&#39;s operation.</li><li><strong>Temporary Path Creation</strong>: For processing, a temporary path is often generated using the <code>os.tmpdir()</code> method, which provides a unique temporary directory for the tool&#39;s operations.</li><li><strong>Directory Creation</strong>: It ensures the creation of necessary directories, both temporary and output, if they do not already exist.</li><li><strong>File Copying</strong>: The method may involve copying files from the input paths to the temporary path. This step is crucial for operations that require isolated environments or where the original files should not be modified directly.</li><li><strong>Start Event Emission</strong>: An event indicating the start of the process is emitted, which can be used for logging or triggering related actions.</li><li><strong>File Processing</strong>: The core processing of files takes place. This can include a wide range of operations like file transformation, data extraction, or any custom processing logic defined in the tool.</li><li><strong>Output Generation</strong>: Finally, the method handles the generation of output, which could include copying processed files to the output directory, creating additional data files, or cleaning up temporary files and directories.</li></ol><h4 id="example-5" tabindex="-1">Example <a class="header-anchor" href="#example-5" aria-label="Permalink to &quot;Example&quot;">​</a></h4><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> toolInstance</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Tool</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> options</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* options for processing */</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> };</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> inputPath</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;path/to/input&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> outputPath</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;path/to/output&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">toolInstance.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(options, inputPath, outputPath)</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">result</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Handle the result of the processing</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  })</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">error</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Handle any errors that occurred during processing</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  });</span></span></code></pre></div><h4 id="async-process-files-pathin-pathout" tabindex="-1"><code>async process(files, pathIn, pathOut)</code> <a class="header-anchor" href="#async-process-files-pathin-pathout" aria-label="Permalink to &quot;`async process(files, pathIn, pathOut)`&quot;">​</a></h4><p>Processes files.</p><ul><li><code>files</code>: Array of file paths.</li><li><code>pathIn</code>: Input path.</li><li><code>pathOut</code>: Output path.</li></ul><hr><p>This documentation offers comprehensive insights into the <code>Tool.server.js</code> class, a vital part of the ToolX library.</p>',42),h=[n];function l(o,r,p,d,c,k){return i(),a("div",null,h)}const E=s(t,[["render",l]]);export{u as __pageData,E as default};
