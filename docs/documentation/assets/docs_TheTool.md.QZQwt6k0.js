import{_ as s,o as i,c as a,R as n}from"./chunks/framework.o9SS2NfC.js";const g=JSON.parse('{"title":"How to Create a Tool in ToolX","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"docs/TheTool.md","filePath":"docs/TheTool.md","lastUpdated":1702935987000}'),e={name:"docs/TheTool.md"},l=n(`<h1 id="how-to-create-a-tool-in-toolx" tabindex="-1">How to Create a Tool in ToolX <a class="header-anchor" href="#how-to-create-a-tool-in-toolx" aria-label="Permalink to &quot;How to Create a Tool in ToolX&quot;">​</a></h1><h2 id="introduction-to-tool-creation" tabindex="-1">Introduction to Tool Creation <a class="header-anchor" href="#introduction-to-tool-creation" aria-label="Permalink to &quot;Introduction to Tool Creation&quot;">​</a></h2><p>Creating custom tools in ToolX allows for tailored solutions to specific file processing needs. Tools in ToolX have a defined structure and key methods that handle the processing logic.</p><h2 id="understanding-oneveryfile-and-onbody" tabindex="-1">Understanding onEveryFile and onBody <a class="header-anchor" href="#understanding-oneveryfile-and-onbody" aria-label="Permalink to &quot;Understanding onEveryFile and onBody&quot;">​</a></h2><ul><li><code>onEveryFile</code>: This method is invoked for each file that the tool processes. It is where you can define the actions performed on individual files.</li><li><code>onBody</code>: This method is called after all files have been processed by <code>onEveryFile</code>. It is used for final processing steps or to compile results.</li></ul><h2 id="the-significance-of-next" tabindex="-1">The Significance of next() <a class="header-anchor" href="#the-significance-of-next" aria-label="Permalink to &quot;The Significance of next()&quot;">​</a></h2><ul><li>The <code>next()</code> function is crucial in managing the asynchronous flow of file processing. It ensures that the tool moves to the next file or step only after the current operation is complete.</li><li>Proper use of <code>next()</code> is essential for maintaining order and efficiency in the processing pipeline.</li></ul><h2 id="defining-file-extensions-exts" tabindex="-1">Defining File Extensions (exts) <a class="header-anchor" href="#defining-file-extensions-exts" aria-label="Permalink to &quot;Defining File Extensions (exts)&quot;">​</a></h2><ul><li>Specifying file extensions allows you to define which file types the tool will process. For instance, an image processing tool might only handle <code>.jpg</code> and <code>.png</code> files.</li><li>This feature adds a layer of flexibility and control in tool customization.</li></ul><h2 id="code-example-with-explanations" tabindex="-1">Code Example with Explanations <a class="header-anchor" href="#code-example-with-explanations" aria-label="Permalink to &quot;Code Example with Explanations&quot;">​</a></h2><p>Below is an example of a custom ToolX tool with detailed comments:</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CustomTool</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Constructor for initializing the tool</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">options</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.options </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> options;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Define the file extensions this tool will process</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.exts </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;jpg&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;png&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Method called on before all files have been processed</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    async</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> onStart</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">pathIn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">pathOut</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">options</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // File processing logic here</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Method called for each file</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    async</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> onEveryFile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">next</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, { </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">file</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">options</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // File processing logic here</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // ...</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Call next() to move to the next file or processing step</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        next</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(file);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Method called after all files have been processed</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    async</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> onBody</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">next</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, { </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">files</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">options</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Final processing logic or compilation of results</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // ...</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Finalize the processing</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        next</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> CustomTool;</span></span></code></pre></div><p>This example illustrates the basic structure and key methods of a ToolX tool. The comments provide insights into each part of the tool&#39;s functionality.</p><h2 id="conclusion" tabindex="-1">Conclusion <a class="header-anchor" href="#conclusion" aria-label="Permalink to &quot;Conclusion&quot;">​</a></h2><p>Understanding the architecture and flow of ToolX tools is vital for creating effective custom solutions. This guide aims to provide a foundational understanding, empowering developers to build their own tools within the ToolX ecosystem.</p>`,15),t=[l];function o(h,p,r,k,d,c){return i(),a("div",null,t)}const y=s(e,[["render",o]]);export{g as __pageData,y as default};
