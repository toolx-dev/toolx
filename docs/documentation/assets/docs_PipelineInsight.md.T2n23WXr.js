import{_ as i,o as s,c as a,R as n}from"./chunks/framework.o9SS2NfC.js";const E=JSON.parse('{"title":"Creating and Using Pipelines in ToolX","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"docs/PipelineInsight.md","filePath":"docs/PipelineInsight.md","lastUpdated":1703264345000}'),e={name:"docs/PipelineInsight.md"},t=n(`<h1 id="creating-and-using-pipelines-in-toolx" tabindex="-1">Creating and Using Pipelines in ToolX <a class="header-anchor" href="#creating-and-using-pipelines-in-toolx" aria-label="Permalink to &quot;Creating and Using Pipelines in ToolX&quot;">​</a></h1><h2 id="introduction-to-pipelines" tabindex="-1">Introduction to Pipelines <a class="header-anchor" href="#introduction-to-pipelines" aria-label="Permalink to &quot;Introduction to Pipelines&quot;">​</a></h2><p>Pipelines in ToolX are powerful constructs designed to handle complex sequences of file processing tasks. They allow for the chaining of multiple operations, providing a structured and efficient approach to manage workflows.</p><h2 id="sequential-processing-in-pipelines" tabindex="-1">Sequential Processing in Pipelines <a class="header-anchor" href="#sequential-processing-in-pipelines" aria-label="Permalink to &quot;Sequential Processing in Pipelines&quot;">​</a></h2><ul><li><strong>Sequential Order</strong>: Pipelines in ToolX process tasks in a defined sequence, ensuring each step is completed before moving to the next.</li><li><strong>Error Handling</strong>: By managing tasks sequentially, pipelines help in efficient error handling and smooth progression through the processing steps.</li></ul><h2 id="pipeline-creation-and-usage" tabindex="-1">Pipeline Creation and Usage <a class="header-anchor" href="#pipeline-creation-and-usage" aria-label="Permalink to &quot;Pipeline Creation and Usage&quot;">​</a></h2><p>Creating a pipeline involves defining a series of tasks (tools) and the order in which they should be executed. Pipelines can integrate various tools, allowing for a composite and versatile processing solution.</p><h3 id="code-examples-with-explanations" tabindex="-1">Code Examples with Explanations <a class="header-anchor" href="#code-examples-with-explanations" aria-label="Permalink to &quot;Code Examples with Explanations&quot;">​</a></h3><p>Below are examples of creating and using pipelines in ToolX:</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { Pipeline } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;@toolx/core&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> CustomToolOne </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./CustomToolOne&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> CustomToolTwo </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./CustomToolTwo&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Creating a new pipeline instance</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> myPipeline</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Pipeline</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* options */</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;path/to/input&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;path/to/output&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Adding tools to the pipeline</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">myPipeline.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">compose</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CustomToolOne</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* options */</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }),</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CustomToolTwo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* options */</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Pipeline processing complete&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><p>This example demonstrates the basic structure of a pipeline, integrating two custom tools. Each tool in the pipeline performs its task in the order they are added.</p><h2 id="conclusion" tabindex="-1">Conclusion <a class="header-anchor" href="#conclusion" aria-label="Permalink to &quot;Conclusion&quot;">​</a></h2><p>Understanding the architecture and functionality of pipelines is crucial in ToolX for creating sophisticated and efficient file processing workflows. This guide aims to provide foundational knowledge and practical examples to empower developers in building effective pipelines.</p>`,13),l=[t];function p(h,o,r,k,d,c){return s(),a("div",null,l)}const u=i(e,[["render",p]]);export{E as __pageData,u as default};
